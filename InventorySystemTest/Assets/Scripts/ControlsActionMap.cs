//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Carl/InputComponents/ControlsActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsActionMap"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""4330bc90-876a-4240-aab0-66a6f923b7dd"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""f0aa58b8-ef45-4819-99d8-f6ed38da2317"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""185220d2-37d8-4013-8bc1-75895815caeb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Forward"",
                    ""id"": ""896e15e0-d1c5-4dc9-a6a6-89fb0edfb53c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5ff6eb36-c280-4b07-bce6-e53d5857278a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""20f7a910-b259-4af2-ab8d-9735a81f1c85"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""7098a02c-75cb-42c1-89c6-aaec78b2b692"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4c2c8f78-27ba-4e0c-b81d-5b7ba7659ec5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1a16e863-1b89-47f3-bf43-cd86f673d341"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""DebugControls"",
            ""id"": ""e54788ef-ea56-4ee7-921d-5ef87db1e8c6"",
            ""actions"": [
                {
                    ""name"": ""CameraToggle"",
                    ""type"": ""Button"",
                    ""id"": ""5e4f5f83-ef18-42d9-a9d2-ac9294d156aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CreateRandomItem"",
                    ""type"": ""Button"",
                    ""id"": ""72d7fa37-c636-4b3d-a3a1-c0abcb223bcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eee0fefe-f643-4b48-8d87-d3b8b709cc9a"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a6db0c6-69f9-4ccc-9610-e3a4764b8f99"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateRandomItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""0c791dbe-20ea-47ee-96a0-d5f30857e53c"",
            ""actions"": [
                {
                    ""name"": ""ToggleInventory"",
                    ""type"": ""Button"",
                    ""id"": ""fb148531-f80b-4448-9d04-3bcc88598ff3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateItem"",
                    ""type"": ""Button"",
                    ""id"": ""97dec816-8ff3-4e2e-8a92-9a3186bd5873"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickInventory"",
                    ""type"": ""Button"",
                    ""id"": ""0c6e2530-ed4f-4920-9285-8966f733a156"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""5adac0ac-9b1e-454a-b3f1-bdea760ab44c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52fbe87b-25be-4ca3-b7a6-34c7d11ff01e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4fb0487-727a-4afa-b65d-7a35d8a1073d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b1edc50-dd4b-4d6d-9e43-ae9d372df7d3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77c7f7a6-dcc3-4518-879e-123f01513874"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Forward = m_PlayerMovement.FindAction("Forward", throwIfNotFound: true);
        m_PlayerMovement_Right = m_PlayerMovement.FindAction("Right", throwIfNotFound: true);
        // DebugControls
        m_DebugControls = asset.FindActionMap("DebugControls", throwIfNotFound: true);
        m_DebugControls_CameraToggle = m_DebugControls.FindAction("CameraToggle", throwIfNotFound: true);
        m_DebugControls_CreateRandomItem = m_DebugControls.FindAction("CreateRandomItem", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_ToggleInventory = m_Inventory.FindAction("ToggleInventory", throwIfNotFound: true);
        m_Inventory_RotateItem = m_Inventory.FindAction("RotateItem", throwIfNotFound: true);
        m_Inventory_ClickInventory = m_Inventory.FindAction("ClickInventory", throwIfNotFound: true);
        m_Inventory_MousePosition = m_Inventory.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Forward;
    private readonly InputAction m_PlayerMovement_Right;
    public struct PlayerMovementActions
    {
        private @ControlsActionMap m_Wrapper;
        public PlayerMovementActions(@ControlsActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_PlayerMovement_Forward;
        public InputAction @Right => m_Wrapper.m_PlayerMovement_Right;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnForward;
                @Right.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // DebugControls
    private readonly InputActionMap m_DebugControls;
    private IDebugControlsActions m_DebugControlsActionsCallbackInterface;
    private readonly InputAction m_DebugControls_CameraToggle;
    private readonly InputAction m_DebugControls_CreateRandomItem;
    public struct DebugControlsActions
    {
        private @ControlsActionMap m_Wrapper;
        public DebugControlsActions(@ControlsActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraToggle => m_Wrapper.m_DebugControls_CameraToggle;
        public InputAction @CreateRandomItem => m_Wrapper.m_DebugControls_CreateRandomItem;
        public InputActionMap Get() { return m_Wrapper.m_DebugControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugControlsActions set) { return set.Get(); }
        public void SetCallbacks(IDebugControlsActions instance)
        {
            if (m_Wrapper.m_DebugControlsActionsCallbackInterface != null)
            {
                @CameraToggle.started -= m_Wrapper.m_DebugControlsActionsCallbackInterface.OnCameraToggle;
                @CameraToggle.performed -= m_Wrapper.m_DebugControlsActionsCallbackInterface.OnCameraToggle;
                @CameraToggle.canceled -= m_Wrapper.m_DebugControlsActionsCallbackInterface.OnCameraToggle;
                @CreateRandomItem.started -= m_Wrapper.m_DebugControlsActionsCallbackInterface.OnCreateRandomItem;
                @CreateRandomItem.performed -= m_Wrapper.m_DebugControlsActionsCallbackInterface.OnCreateRandomItem;
                @CreateRandomItem.canceled -= m_Wrapper.m_DebugControlsActionsCallbackInterface.OnCreateRandomItem;
            }
            m_Wrapper.m_DebugControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraToggle.started += instance.OnCameraToggle;
                @CameraToggle.performed += instance.OnCameraToggle;
                @CameraToggle.canceled += instance.OnCameraToggle;
                @CreateRandomItem.started += instance.OnCreateRandomItem;
                @CreateRandomItem.performed += instance.OnCreateRandomItem;
                @CreateRandomItem.canceled += instance.OnCreateRandomItem;
            }
        }
    }
    public DebugControlsActions @DebugControls => new DebugControlsActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_ToggleInventory;
    private readonly InputAction m_Inventory_RotateItem;
    private readonly InputAction m_Inventory_ClickInventory;
    private readonly InputAction m_Inventory_MousePosition;
    public struct InventoryActions
    {
        private @ControlsActionMap m_Wrapper;
        public InventoryActions(@ControlsActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleInventory => m_Wrapper.m_Inventory_ToggleInventory;
        public InputAction @RotateItem => m_Wrapper.m_Inventory_RotateItem;
        public InputAction @ClickInventory => m_Wrapper.m_Inventory_ClickInventory;
        public InputAction @MousePosition => m_Wrapper.m_Inventory_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @ToggleInventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnToggleInventory;
                @ToggleInventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnToggleInventory;
                @ToggleInventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnToggleInventory;
                @RotateItem.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRotateItem;
                @RotateItem.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRotateItem;
                @RotateItem.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRotateItem;
                @ClickInventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnClickInventory;
                @ClickInventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnClickInventory;
                @ClickInventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnClickInventory;
                @MousePosition.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleInventory.started += instance.OnToggleInventory;
                @ToggleInventory.performed += instance.OnToggleInventory;
                @ToggleInventory.canceled += instance.OnToggleInventory;
                @RotateItem.started += instance.OnRotateItem;
                @RotateItem.performed += instance.OnRotateItem;
                @RotateItem.canceled += instance.OnRotateItem;
                @ClickInventory.started += instance.OnClickInventory;
                @ClickInventory.performed += instance.OnClickInventory;
                @ClickInventory.canceled += instance.OnClickInventory;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);
    public interface IPlayerMovementActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
    public interface IDebugControlsActions
    {
        void OnCameraToggle(InputAction.CallbackContext context);
        void OnCreateRandomItem(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnToggleInventory(InputAction.CallbackContext context);
        void OnRotateItem(InputAction.CallbackContext context);
        void OnClickInventory(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
